package frontend;

import backend.*;
import javax.swing.*;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class MainGUI extends JFrame {



public class MainGUI extends JFrame {
    private ExamManager manager = new ExamManager();
    private JPanel questionPanel;
    private JLabel label;

    public MainGUI() {
        setTitle("Evaluación Taxonomía de Bloom");
        setSize(600, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setupUI();
    }

    private void setupUI() {
        JButton loadButton = new JButton("Cargar Ítems");
        loadButton.addActionListener(e -> loadItems());

        label = new JLabel("Cargue un archivo para iniciar.");
        questionPanel = new JPanel();

        add(loadButton, BorderLayout.NORTH);
        add(label, BorderLayout.CENTER);
        add(questionPanel, BorderLayout.SOUTH);
    }

    private void loadItems() {
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            List<Item> items = new ArrayList<>();
            try (Scanner sc = new Scanner(file)) {
                while (sc.hasNextLine()) {
                    String line = sc.nextLine();
                    String[] parts = line.split(";");
                    Item item = new Item(
                        parts[0],
                        parts[1].split(","),
                        parts[2],
                        Item.Type.valueOf(parts[3]),
                        Item.BloomLevel.valueOf(parts[4]),
                        Integer.parseInt(parts[5])
                    );
                    items.add(item);
                }
                manager.loadItems(items);
                label.setText("Ítems cargados: " + items.size() + ". Tiempo total estimado: " + manager.getTotalTime() + " min.");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al cargar archivo: " + ex.getMessage());
            }
        }
    }
}
}
}
